<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Elmah.AspNet</name>
    </assembly>
    <members>
        <member name="T:Elmah.AboutPage">
            <summary>
            Renders an HTML page that presents information about the version,
            build configuration, source files as well as a method to check
            for updates.
            </summary>
        </member>
        <member name="T:Elmah.Assertions.AssertionFactoryHandler">
            <summary>
            Represents the method that will be responsible for creating an 
            assertion object and initializing it from an XML configuration
            element.
            </summary>
        </member>
        <member name="T:Elmah.Assertions.AssertionFactory">
            <summary>
            Holds factory methods for creating configured assertion objects.
            </summary>
        </member>
        <member name="M:Elmah.Assertions.AssertionFactory.DecodeClrTypeNamespaceFromXmlNamespace(System.String,System.String@,System.String@)">
            <remarks>
            Ideally, we would be able to use SoapServices.DecodeXmlNamespaceForClrTypeNamespace
            but that requires a link demand permission that will fail in partially trusted
            environments such as ASP.NET medium trust.
            </remarks>
        </member>
        <member name="T:Elmah.Assertions.ComparisonAssertion">
            <summary>
            An assertion implementation whose test is based on whether
            the result of an input expression evaluated against a context
            matches a regular expression pattern or not.
            </summary>
        </member>
        <member name="T:Elmah.Assertions.CompositeAssertion">
            <summary>
            Read-only collection of <see cref="T:Elmah.Assertions.IAssertion"/> instances.
            </summary>
        </member>
        <member name="T:Elmah.Assertions.IAssertion">
            <summary>
            Provides evaluation of a context to determine whether it matches
            certain criteria or not.
            </summary>
        </member>
        <member name="M:Elmah.Assertions.IAssertion.Test(System.Object)">
            <remarks>
            The context is typed generically as System.Object when it could have
            been restricted to System.Web.HttpContext and also avoid unnecessary
            casting downstream. However, using object allows simple
            assertions to be unit-tested without having to stub out a lot of
            the classes from System.Web (most of which cannot be stubbed anyhow
            due to lack of virtual and instance methods).
            </remarks>
        </member>
        <member name="T:Elmah.Assertions.JScriptAssertion">
            <summary>
            An assertion implementation that uses a JScript expression to
            determine the outcome.
            </summary>
            <remarks>
            Each instance of this type maintains a separate copy of the JScript 
            engine so use it sparingly. For example, instead of creating several
            objects, each with different a expression, try and group all
            expressions that apply to particular context into a single compound 
            JScript expression using the conditional-OR (||) operator.
            </remarks>
        </member>
        <member name="T:Elmah.Assertions.JScriptAssertion.PartialTrustEvaluationStrategy">
            <summary>
            Uses the JScript eval function to compile and evaluate the
            expression against the context on each evaluation.
            </summary>
        </member>
        <member name="T:Elmah.Assertions.JScriptAssertion.FullTrustEvaluationStrategy">
            <summary>
            Compiles the given expression into a JScript function at time of 
            construction and then simply invokes it during evaluation, using
            the context as a parameter.
            </summary>
        </member>
        <member name="T:Elmah.Assertions.RegexMatchAssertion">
            <summary>
            An assertion implementation whose test is based on whether
            the result of an input expression evaluated against a context
            matches a regular expression pattern or not.
            </summary>
        </member>
        <member name="T:Elmah.Assertions.StaticAssertion">
            <summary>
            An static assertion implementation that always evaluates to 
            a preset value.
            </summary>
        </member>
        <member name="T:Elmah.Assertions.TypeAssertion">
            <summary>
            An assertion implementation whose test is based on whether
            the result of an input expression evaluated against a context
            matches a regular expression pattern or not.
            </summary>
        </member>
        <member name="T:Elmah.DataBinder">
            <summary>
            Provides data expression evaluation facilites similar to 
            <see cref="T:System.Web.UI.DataBinder"/> in ASP.NET.
            </summary>
        </member>
        <member name="M:Elmah.Async.TaskFromResultOrError``1(``0,System.Exception)">
            <summary>
            Creates a task that has already completed with either the
            given result or faulted with the given exception.
            </summary>
            <remarks>
            If <paramref name="exception"/> is supplied then 
            <paramref name="result"/> is ignored.
            </remarks>
        </member>
        <member name="F:Elmah.AsyncResult._owner">
            <summary>
            The object which started the operation.
            </summary>
        </member>
        <member name="F:Elmah.AsyncResult._operationId">
            <summary>
            Used to verify the BeginXXX and EndXXX calls match.
            </summary>
        </member>
        <member name="P:Elmah.Build.ImageRuntimeVersion">
            <summary>
            Gets a string representing the version of the CLR saved in 
            the file containing the manifest. Under 1.0, this returns
            the hard-wired string "v1.0.3705".
            </summary>
        </member>
        <member name="F:Elmah.Build.Status">
            <summary>
            This is the status or milestone of the build. Examples are
            M1, M2, ..., Mn, BETA1, BETA2, RC1, RC2, RTM.
            </summary>
        </member>
        <member name="T:Elmah.ErrorMailHtmlPage">
            <summary>
            Renders an HTML page displaying details about an error from the 
            error log ready for emailing.
            </summary>
        </member>
        <member name="T:Elmah.PoweredBy">
            <summary>
            Displays a "Powered-by ELMAH" message that also contains the assembly
            file version informatin and copyright notice.
            </summary>
        </member>
        <member name="T:Elmah.ErrorDetailPage">
            <summary>
            Renders an HTML page displaying details about an error from the 
            error log.
            </summary>
        </member>
        <member name="T:Elmah.HelperResult">
            <summary>
            Represents the result of a helper action as an HTML-encoded string.
            </summary>
        </member>
        <member name="T:Elmah.Debug">
            <summary>
            Provides methods for assertions and debugging help that is mostly 
            applicable during development.
            </summary>
        </member>
        <member name="T:Elmah.ErrorDigestRssHandler">
            <summary>
            Renders an RSS feed that is a daily digest of the most recently 
            recorded errors in the error log. The feed spans at most 15
            days on which errors occurred.
            </summary>
        </member>
        <member name="T:Elmah.ErrorDisplay">
            <summary>
            Provides miscellaneous formatting methods for 
            </summary>
        </member>
        <member name="M:Elmah.ErrorDisplay.HumaneExceptionErrorType(System.String)">
            <summary>
            Formats the type of an error, typically supplied as the 
            <see cref="P:Elmah.Error.Type"/> value, in a short and human-
            readable form.
            </summary>
            <remarks>
            Typically, exception type names can be long to display and 
            complex to consume. The essential part can usually be found in
            the start of an exception type name minus its namespace. For
            example, a human reading the string,
            "System.Runtime.InteropServices.COMException", will usually
            considers "COM" as the most useful component of the entire
            type name. This method does exactly that. It assumes that the
            the input type is a .NET Framework exception type name where
            the namespace and class will be separated by the last 
            period (.) and where the type name ends in "Exception". If
            these conditions are method then a string like,
            "System.Web.HttpException" will be transformed into simply
            "Html".
            </remarks>
        </member>
        <member name="M:Elmah.ErrorDisplay.HumaneExceptionErrorType(Elmah.Error)">
            <summary>
            Formats the error type of an <see cref="T:Elmah.Error"/> object in a 
            short and human-readable form.
            </summary>
        </member>
        <member name="T:Elmah.ErrorFilterModule">
            <summary>
            HTTP module implementation that logs unhandled exceptions in an
            ASP.NET Web application to an error log.
            </summary>
        </member>
        <member name="M:Elmah.ErrorFilterModule.Init(System.Web.HttpApplication)">
            <summary>
            Initializes the module and prepares it to handle requests.
            </summary>
        </member>
        <member name="M:Elmah.ErrorFilterModule.Dispose">
            <summary>
            Disposes of the resources (other than memory) used by the module.
            </summary>
        </member>
        <member name="T:Elmah.ErrorFilterSectionHandler">
            <summary>
            Handler for the &lt;errorFilter&gt; section of the
            configuration file.
            </summary>
        </member>
        <member name="T:Elmah.ErrorHtmlPage">
            <summary>
            Renders an HTML page displaying the detailed host-generated (ASP.NET)
            HTML recorded for an error from the error log.
            </summary>
        </member>
        <member name="T:Elmah.ErrorJsonHandler">
            <summary>
            Renders an error as JSON Text (RFC 4627).
            </summary>
        </member>
        <member name="T:Elmah.ErrorLogDataSourceAdapter">
            <summary>
            Methods of this type are designed to serve an
            <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> control
            and are adapted according to expected call signatures and
            behavior.
            </summary>
        </member>
        <member name="M:Elmah.ErrorLogDataSourceAdapter.#ctor">
            <summary>
            Initializes a new instance of the 
            <see cref="T:Elmah.ErrorLogDataSourceAdapter"/> class with the default
            error log implementation.
            </summary>
        </member>
        <member name="M:Elmah.ErrorLogDataSourceAdapter.GetErrorCount">
            <summary>
            Use as the value for <see cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod"/>.
            </summary>
        </member>
        <member name="M:Elmah.ErrorLogDataSourceAdapter.GetErrors(System.Int32,System.Int32)">
            <summary>
            Use as the value for <see cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod"/>.
            </summary>
            <remarks>
            The parameters of this method are named after the default values
            for <see cref="P:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName"/> 
            and <see cref="P:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName"/> so
            that the minimum markup is needed for the object data source
            control.
            </remarks>
        </member>
        <member name="T:Elmah.ErrorLogModule">
            <summary>
            HTTP module implementation that logs unhandled exceptions in an
            ASP.NET Web application to an error log.
            </summary>
        </member>
        <member name="M:Elmah.ErrorLogModule.OnInit(System.Web.HttpApplication)">
            <summary>
            Initializes the module and prepares it to handle requests.
            </summary>
        </member>
        <member name="M:Elmah.ErrorLogModule.GetErrorLog(System.Web.HttpContextBase)">
            <summary>
            Gets the <see cref="T:Elmah.ErrorLog"/> instance to which the module
            will log exceptions.
            </summary>
        </member>
        <member name="M:Elmah.ErrorLogModule.OnError(System.Object,System.EventArgs)">
            <summary>
            The handler called when an unhandled exception bubbles up to 
            the module.
            </summary>
        </member>
        <member name="M:Elmah.ErrorLogModule.OnErrorSignaled(System.Object,Elmah.ErrorSignalEventArgs)">
            <summary>
            The handler called when an exception is explicitly signaled.
            </summary>
        </member>
        <member name="M:Elmah.ErrorLogModule.LogException(System.Exception,System.Web.HttpContextBase)">
            <summary>
            Logs an exception and its context to the error log.
            </summary>
        </member>
        <member name="M:Elmah.ErrorLogModule.OnLogged(Elmah.ErrorLoggedEventArgs)">
            <summary>
            Raises the <see cref="E:Elmah.ErrorLogModule.Logged"/> event.
            </summary>
        </member>
        <member name="M:Elmah.ErrorLogModule.OnFiltering(Elmah.ExceptionFilterEventArgs)">
            <summary>
            Raises the <see cref="E:Elmah.ErrorLogModule.Filtering"/> event.
            </summary>
        </member>
        <member name="P:Elmah.ErrorLogModule.SupportDiscoverability">
            <summary>
            Determines whether the module will be registered for discovery
            in partial trust environments or not.
            </summary>
        </member>
        <member name="T:Elmah.ErrorLogPage">
            <summary>
            Renders an HTML page displaying a page of errors from the error log.
            </summary>
        </member>
        <member name="T:Elmah.ErrorLogPageFactory">
            <summary>
            HTTP handler factory that dispenses handlers for rendering views and 
            resources needed to display the error log.
            </summary>
        </member>
        <member name="M:Elmah.ErrorLogPageFactory.GetHandler(System.Web.HttpContextBase,System.String,System.String,System.String)">
            <summary>
            Returns an object that implements the <see cref="T:System.Web.IHttpHandler"/> 
            interface and which is responsible for serving the request.
            </summary>
            <returns>
            A new <see cref="T:System.Web.IHttpHandler"/> object that processes the request.
            </returns>
        </member>
        <member name="M:Elmah.ErrorLogPageFactory.ReleaseHandler(System.Web.IHttpHandler)">
            <summary>
            Enables the factory to reuse an existing handler instance.
            </summary>
        </member>
        <member name="M:Elmah.ErrorLogPageFactory.IsAuthorized(System.Web.HttpContextBase)">
            <summary>
            Determines if the request is authorized by objects implementing
            <see cref="T:Elmah.IRequestAuthorizationHandler" />.
            </summary>
            <returns>
            Returns <c>false</c> if unauthorized, <c>true</c> if authorized 
            otherwise <c>null</c> if no handlers were available to answer.
            </returns>
        </member>
        <member name="T:Elmah.ErrorLogSectionHandler">
            <summary>
            Handler for the &lt;errorLog&gt; section of the
            configuration file.
            </summary>
        </member>
        <member name="T:Elmah.ErrorMailHtmlFormatter">
            <summary>
            Formats the HTML to display the details of a given error that is
            suitable for sending as the body of an e-mail message.
            </summary>
        </member>
        <member name="P:Elmah.ErrorMailHtmlFormatter.MimeType">
            <summary>
            Returns the text/html MIME type that is the format provided 
            by this <see cref="T:Elmah.ErrorTextFormatter"/> implementation.
            </summary>
        </member>
        <member name="M:Elmah.ErrorMailHtmlFormatter.Format(System.IO.TextWriter,Elmah.Error)">
            <summary>
            Formats a complete HTML document describing the given 
            <see cref="T:Elmah.Error"/> instance.
            </summary>
        </member>
        <member name="T:Elmah.ErrorMailModule">
            <summary>
            HTTP module that sends an e-mail whenever an unhandled exception
            occurs in an ASP.NET web application.
            </summary>
        </member>
        <member name="M:Elmah.ErrorMailModule.OnInit(System.Web.HttpApplication)">
            <summary>
            Initializes the module and prepares it to handle requests.
            </summary>
        </member>
        <member name="P:Elmah.ErrorMailModule.SupportDiscoverability">
            <summary>
            Determines whether the module will be registered for discovery
            in partial trust environments or not.
            </summary>
        </member>
        <member name="P:Elmah.ErrorMailModule.MailSender">
            <summary>
            Gets the e-mail address of the sender.
            </summary>
        </member>
        <member name="P:Elmah.ErrorMailModule.MailRecipient">
            <summary>
            Gets the e-mail address of the recipient, or a 
            comma-/semicolon-delimited list of e-mail addresses in case of 
            multiple recipients.
            </summary>
            <remarks>
            When using System.Web.Mail components under .NET Framework 1.x, 
            multiple recipients must be semicolon-delimited.
            When using System.Net.Mail components under .NET Framework 2.0
            or later, multiple recipients must be comma-delimited.
            </remarks>
        </member>
        <member name="P:Elmah.ErrorMailModule.MailCopyRecipient">
            <summary>
            Gets the e-mail address of the recipient for mail carbon 
            copy (CC), or a comma-/semicolon-delimited list of e-mail 
            addresses in case of multiple recipients.
            </summary>
            <remarks>
            When using System.Web.Mail components under .NET Framework 1.x, 
            multiple recipients must be semicolon-delimited.
            When using System.Net.Mail components under .NET Framework 2.0
            or later, multiple recipients must be comma-delimited.
            </remarks>
        </member>
        <member name="P:Elmah.ErrorMailModule.MailSubjectFormat">
            <summary>
            Gets the text used to format the e-mail subject.
            </summary>
            <remarks>
            The subject text specification may include {0} where the
            error message (<see cref="P:Elmah.Error.Message"/>) should be inserted 
            and {1} <see cref="P:Elmah.Error.Type"/> where the error type should 
            be insert.
            </remarks>
        </member>
        <member name="P:Elmah.ErrorMailModule.MailPriority">
            <summary>
            Gets the priority of the e-mail. 
            </summary>
        </member>
        <member name="P:Elmah.ErrorMailModule.SmtpServer">
            <summary>
            Gets the SMTP server host name used when sending the mail.
            </summary>
        </member>
        <member name="P:Elmah.ErrorMailModule.SmtpPort">
            <summary>
            Gets the SMTP port used when sending the mail.
            </summary>
        </member>
        <member name="P:Elmah.ErrorMailModule.AuthUserName">
            <summary>
            Gets the user name to use if the SMTP server requires authentication.
            </summary>
        </member>
        <member name="P:Elmah.ErrorMailModule.AuthPassword">
            <summary>
            Gets the clear-text password to use if the SMTP server requires 
            authentication.
            </summary>
        </member>
        <member name="P:Elmah.ErrorMailModule.NoYsod">
            <summary>
            Indicates whether <a href="http://en.wikipedia.org/wiki/Screens_of_death#ASP.NET">YSOD</a> 
            is attached to the e-mail or not. If <c>true</c>, the YSOD is 
            not attached.
            </summary>
        </member>
        <member name="P:Elmah.ErrorMailModule.UseSsl">
            <summary>
            Determines if SSL will be used to encrypt communication with the 
            mail server.
            </summary>
        </member>
        <member name="M:Elmah.ErrorMailModule.OnError(System.Object,System.EventArgs)">
            <summary>
            The handler called when an unhandled exception bubbles up to 
            the module.
            </summary>
        </member>
        <member name="M:Elmah.ErrorMailModule.OnErrorSignaled(System.Object,Elmah.ErrorSignalEventArgs)">
            <summary>
            The handler called when an exception is explicitly signaled.
            </summary>
        </member>
        <member name="M:Elmah.ErrorMailModule.OnError(System.Exception,System.Web.HttpContextBase)">
            <summary>
            Reports the exception.
            </summary>
        </member>
        <member name="M:Elmah.ErrorMailModule.OnFiltering(Elmah.ExceptionFilterEventArgs)">
            <summary>
            Raises the <see cref="E:Elmah.ErrorMailModule.Filtering"/> event.
            </summary>
        </member>
        <member name="M:Elmah.ErrorMailModule.ReportErrorAsync(Elmah.Error)">
            <summary>
            Schedules the error to be e-mailed asynchronously.
            </summary>
            <remarks>
            The default implementation uses the <see cref="T:System.Threading.ThreadPool"/>
            to queue the reporting.
            </remarks>
        </member>
        <member name="M:Elmah.ErrorMailModule.ReportError(Elmah.Error)">
            <summary>
            Schedules the error to be e-mailed synchronously.
            </summary>
        </member>
        <member name="M:Elmah.ErrorMailModule.CreateErrorFormatter">
            <summary>
            Creates the <see cref="T:Elmah.ErrorTextFormatter"/> implementation to 
            be used to format the body of the e-mail.
            </summary>
        </member>
        <member name="M:Elmah.ErrorMailModule.SendMail(System.Net.Mail.MailMessage)">
            <summary>
            Sends the e-mail using SmtpMail or SmtpClient.
            </summary>
        </member>
        <member name="M:Elmah.ErrorMailModule.OnMailing(Elmah.ErrorMailEventArgs)">
            <summary>
            Fires the <see cref="E:Elmah.ErrorMailModule.Mailing"/> event.
            </summary>
        </member>
        <member name="M:Elmah.ErrorMailModule.OnMailed(Elmah.ErrorMailEventArgs)">
            <summary>
            Fires the <see cref="E:Elmah.ErrorMailModule.Mailed"/> event.
            </summary>
        </member>
        <member name="M:Elmah.ErrorMailModule.OnDisposingMail(Elmah.ErrorMailEventArgs)">
            <summary>
            Fires the <see cref="E:Elmah.ErrorMailModule.DisposingMail"/> event.
            </summary>
        </member>
        <member name="M:Elmah.ErrorMailModule.GetConfig">
            <summary>
            Gets the configuration object used by <see cref="M:Elmah.ErrorMailModule.OnInit(System.Web.HttpApplication)"/> to read
            the settings for module.
            </summary>
        </member>
        <member name="T:Elmah.ErrorMailSectionHandler">
            <summary>
            Handler for the &lt;errorMail&gt; section of the
            configuration file.
            </summary>
        </member>
        <member name="T:Elmah.ErrorRssHandler">
            <summary>
            Renders a XML using the RSS 0.91 vocabulary that displays, at most,
            the 15 most recent errors recorded in the error log.
            </summary>
        </member>
        <member name="T:Elmah.ErrorTextFormatter">
            <summary>
            Provides the base contract for implementations that render
            text-based formatting for an error.
            </summary>
        </member>
        <member name="P:Elmah.ErrorTextFormatter.MimeType">
            <summary>
            Gets the MIME type of the text format provided by the formatter
            implementation.
            </summary>
        </member>
        <member name="M:Elmah.ErrorTextFormatter.Format(System.IO.TextWriter,Elmah.Error)">
            <summary>
            Formats a text representation of the given <see cref="T:Elmah.Error"/> 
            instance using a <see cref="T:System.IO.TextWriter"/>.
            </summary>
        </member>
        <member name="T:Elmah.ErrorTweetModule">
            <summary>
            HTTP module implementation that posts tweets (short messages 
            usually limited to 140 characters) about unhandled exceptions in 
            an ASP.NET Web application to a Twitter account.
            </summary>
            <remarks>
            This module requires that the hosting application has permissions
            send HTTP POST requests to another Internet domain.
            </remarks>
        </member>
        <member name="M:Elmah.ErrorTweetModule.OnInit(System.Web.HttpApplication)">
            <summary>
            Initializes the module and prepares it to handle requests.
            </summary>
        </member>
        <member name="M:Elmah.ErrorTweetModule.GetErrorLog(System.Web.HttpContextBase)">
            <summary>
            Gets the <see cref="T:Elmah.ErrorLog"/> instance to which the module
            will log exceptions.
            </summary>
        </member>
        <member name="M:Elmah.ErrorTweetModule.OnError(System.Object,System.EventArgs)">
            <summary>
            The handler called when an unhandled exception bubbles up to 
            the module.
            </summary>
        </member>
        <member name="M:Elmah.ErrorTweetModule.OnErrorSignaled(System.Object,Elmah.ErrorSignalEventArgs)">
            <summary>
            The handler called when an exception is explicitly signaled.
            </summary>
        </member>
        <member name="M:Elmah.ErrorTweetModule.LogException(System.Exception,System.Web.HttpContextBase)">
            <summary>
            Logs an exception and its context to the error log.
            </summary>
        </member>
        <member name="M:Elmah.ErrorTweetModule.OnFiltering(Elmah.ExceptionFilterEventArgs)">
            <summary>
            Raises the <see cref="E:Elmah.ErrorTweetModule.Filtering"/> event.
            </summary>
        </member>
        <member name="P:Elmah.ErrorTweetModule.SupportDiscoverability">
            <summary>
            Determines whether the module will be registered for discovery
            in partial trust environments or not.
            </summary>
        </member>
        <member name="M:Elmah.ErrorTweetModule.GetConfig">
            <summary>
            Gets the configuration object used by <see cref="M:Elmah.ErrorTweetModule.OnInit(System.Web.HttpApplication)"/> to read
            the settings for module.
            </summary>
        </member>
        <member name="T:Elmah.ErrorTweetSectionHandler">
            <summary>
            Handler for the &lt;errorTweet&gt; section of the
            configuration file.
            </summary>
        </member>
        <member name="T:Elmah.ErrorXmlHandler">
            <summary>
            Renders an error as an XML document.
            </summary>
        </member>
        <member name="T:Elmah.HtmlLinkType">
            <summary>
            User agents, search engines, etc. may interpret and use these link 
            types in a variety of ways. For example, user agents may provide 
            access to linked documents through a navigation bar.
            </summary>
            <remarks>
            See <a href="http://www.w3.org/TR/html401/types.html#type-links">6.12 Link types</a>
            for more information.
            </remarks>
        </member>
        <member name="T:Elmah.HttpModuleBase">
            <summary>
            Provides an abstract base class for <see cref="T:System.Web.IHttpModule"/> that
            supports discovery from within partial trust environments.
            </summary>
        </member>
        <member name="P:Elmah.HttpModuleBase.SupportDiscoverability">
            <summary>
            Determines whether the module will be registered for discovery
            in partial trust environments or not.
            </summary>
        </member>
        <member name="M:Elmah.HttpModuleBase.OnInit(System.Web.HttpApplication)">
            <summary>
            Initializes the module and prepares it to handle requests.
            </summary>
        </member>
        <member name="M:Elmah.HttpModuleBase.OnDispose">
            <summary>
            Disposes of the resources (other than memory) used by the module.
            </summary>
        </member>
        <member name="T:Elmah.HttpStatus">
            <summary>
            Represents an HTTP status (code plus reason) as per 
            <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec6.html#sec6.1">Section 6.1 of RFC 2616</a>.
            </summary>
        </member>
        <member name="T:Elmah.ManifestResourceHandler">
            <summary>
            Reads a resource from the assembly manifest and returns its contents
            as the response entity.
            </summary>
        </member>
        <member name="T:Elmah.Mask">
            <summary>
            Collection of utility methods for masking values.
            </summary>
        </member>
        <member name="T:Elmah.SecuritySectionHandler">
            <summary>
            Handler for the &lt;security&gt; section of the
            configuration file.
            </summary>
        </member>
        <member name="T:Elmah.SimpleServiceProviderFactory">
            <summary>
            A simple factory for creating instances of types specified in a 
            section of the configuration file.
            </summary>
        </member>
        <member name="T:Elmah.StringFormatter">
            <summary>
            Helper class for formatting templated strings with supplied replacements.
            </summary>
        </member>
        <member name="M:Elmah.StringFormatter.Format(System.String,System.Object[])">
            <summary>
            Replaces each format item in a specified string with the text 
            equivalent of a corresponding object's value. 
            </summary>
        </member>
        <member name="T:Elmah.StringTranslation">
            <summary>
            Provides translation from multiple representations of a string to a
            single base representation.
            </summary>
        </member>
        <member name="T:Elmah.TestException">
            <summary>
            The exception that is thrown when to test the error logging 
            subsystem. This exception is used for testing purposes only and 
            should not be used for any other purpose.
            </summary>
        </member>
        <member name="M:Elmah.TestException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Elmah.TestException"/> class.
            </summary>
        </member>
        <member name="M:Elmah.TestException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Elmah.TestException"/> class 
            with a specified error message.
            </summary>
        </member>
        <member name="M:Elmah.TestException.#ctor(System.String,System.Exception)">
            <summary>
            ializes a new instance of the <see cref="T:Elmah.TestException"/> 
            class with a specified error message and a reference to the 
            inner exception that is the cause of this exception.
            </summary>
        </member>
        <member name="M:Elmah.TestException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Elmah.TestException"/> class 
            with serialized data.
            </summary>
        </member>
        <member name="T:Elmah.XmlSerializer">
            <summary>
            Serializes object to and from XML documents.
            </summary>
        </member>
        <member name="T:Elmah.XmlText">
            <summary>
            XML 1.0 services.
            </summary>
        </member>
        <member name="M:Elmah.XmlText.StripIllegalXmlCharacters(System.String)">
            <summary>
            Replaces illegal XML characters with a question mark (?).
            </summary>
            <remarks>
            Only strips illegal characters as per XML 1.0, not 1.1. 
            See section <a href="http://www.w3.org/TR/2006/REC-xml-20060816/#charsets">2.2 Characters</a>
            of <a href="http://www.w3.org/TR/2006/REC-xml-20060816">Extensible Markup Language (XML) 1.0 (Fourth Edition)</a>.
            </remarks>
        </member>
        <member name="M:Elmah.XmlText.StripIllegalXmlCharacters(System.String,System.String)">
            <summary>
            Replaces illegal XML characters with a replacement string,
            with the default being a question mark (?) if the replacement
            is null reference.
            </summary>
            <remarks>
            Only strips illegal characters as per XML 1.0, not 1.1. 
            See section <a href="http://www.w3.org/TR/2006/REC-xml-20060816/#charsets">2.2 Characters</a>
            of <a href="http://www.w3.org/TR/2006/REC-xml-20060816">Extensible Markup Language (XML) 1.0 (Fourth Edition)</a>.
            </remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Index``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a sequence of <see cref="T:System.Collections.Generic.KeyValuePair`2"/> 
            where the key is the zero-based index of the value in the source 
            sequence.
            </summary>
            <typeparam name="TSource">Type of elements in <paramref name="source"/> sequence.</typeparam>
            <param name="source">The source sequence.</param>
            <returns>A sequence of <see cref="T:System.Collections.Generic.KeyValuePair`2"/>.</returns>
            <remarks>This operator uses deferred execution and streams its 
            results.</remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Index``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Returns a sequence of <see cref="T:System.Collections.Generic.KeyValuePair`2"/> 
            where the key is the index of the value in the source sequence.
            An additional parameter specifies the starting index.
            </summary>
            <typeparam name="TSource">Type of elements in <paramref name="source"/> sequence.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="startIndex"></param>
            <returns>A sequence of <see cref="T:System.Collections.Generic.KeyValuePair`2"/>.</returns>
            <remarks>This operator uses deferred execution and streams its 
            results.</remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Pairwise``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``1})">
            <summary>
            Returns a sequence resulting from applying a function to each 
            element in the source sequence and its 
            predecessor, with the exception of the first element which is 
            only returned as the predecessor of the second element.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TResult">The type of the element of the returned sequence.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="resultSelector">A transform function to apply to 
            each pair of sequence.</param>
            <returns>
            Returns the resulting sequence.
            </returns>
            <remarks>
            This operator uses deferred execution and streams its results.
            </remarks>
            <example>
            <code>
            int[] numbers = { 123, 456, 789 };
            IEnumerable&lt;int&gt; result = numbers.Pairwise(5, (a, b) => a + b);
            </code>
            The <c>result</c> variable, when iterated over, will yield 
            579 and 1245, in turn.
            </example>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.ToDelimitedString``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates a delimited string from a sequence of values. The 
            delimiter used depends on the current culture of the executing thread.
            </summary>
            <remarks>
            This operator uses immediate execution and effectively buffers the sequence.
            </remarks>
            <typeparam name="TSource">Type of element in the source sequence</typeparam>
            <param name="source">The sequence of items to delimit. Each is converted to a string using the
            simple ToString() conversion.</param>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.ToDelimitedString``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Creates a delimited string from a sequence of values and
            a given delimiter.
            </summary>
            <remarks>
            This operator uses immediate execution and effectively buffers the sequence.
            </remarks>
            <typeparam name="TSource">Type of element in the source sequence</typeparam>
            <param name="source">The sequence of items to delimit. Each is converted to a string using the
            simple ToString() conversion.</param>
            <param name="delimiter">The delimiter to inject between elements. May be null, in which case
            the executing thread's current culture's list separator is used.</param>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.ToDelimitedString(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a delimited string from a sequence of values. The 
            delimiter used depends on the current culture of the executing thread.
            </summary>
            <remarks>
            This operator uses immediate execution and effectively buffers the sequence.
            </remarks>
            <param name="source">The sequence of items to delimit. Each is converted to a string using the
            simple ToString() conversion.</param>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.ToDelimitedString(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Creates a delimited string from a sequence of values and
            a given delimiter.
            </summary>
            <remarks>
            This operator uses immediate execution and effectively buffers the sequence.
            </remarks>
            <param name="source">The sequence of items to delimit. Each is converted to a string using the
            simple ToString() conversion.</param>
            <param name="delimiter">The delimiter to inject between elements. May be null, in which case
            the executing thread's current culture's list separator is used.</param>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.ToDelimitedString(System.Collections.Generic.IEnumerable{System.Boolean})">
            <summary>
            Creates a delimited string from a sequence of values. The 
            delimiter used depends on the current culture of the executing thread.
            </summary>
            <remarks>
            This operator uses immediate execution and effectively buffers the sequence.
            </remarks>
            <param name="source">The sequence of items to delimit. Each is converted to a string using the
            simple ToString() conversion.</param>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.ToDelimitedString(System.Collections.Generic.IEnumerable{System.Boolean},System.String)">
            <summary>
            Creates a delimited string from a sequence of values and
            a given delimiter.
            </summary>
            <remarks>
            This operator uses immediate execution and effectively buffers the sequence.
            </remarks>
            <param name="source">The sequence of items to delimit. Each is converted to a string using the
            simple ToString() conversion.</param>
            <param name="delimiter">The delimiter to inject between elements. May be null, in which case
            the executing thread's current culture's list separator is used.</param>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.ToDelimitedString(System.Collections.Generic.IEnumerable{System.SByte})">
            <summary>
            Creates a delimited string from a sequence of values. The 
            delimiter used depends on the current culture of the executing thread.
            </summary>
            <remarks>
            This operator uses immediate execution and effectively buffers the sequence.
            </remarks>
            <param name="source">The sequence of items to delimit. Each is converted to a string using the
            simple ToString() conversion.</param>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.ToDelimitedString(System.Collections.Generic.IEnumerable{System.SByte},System.String)">
            <summary>
            Creates a delimited string from a sequence of values and
            a given delimiter.
            </summary>
            <remarks>
            This operator uses immediate execution and effectively buffers the sequence.
            </remarks>
            <param name="source">The sequence of items to delimit. Each is converted to a string using the
            simple ToString() conversion.</param>
            <param name="delimiter">The delimiter to inject between elements. May be null, in which case
            the executing thread's current culture's list separator is used.</param>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.ToDelimitedString(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Creates a delimited string from a sequence of values. The 
            delimiter used depends on the current culture of the executing thread.
            </summary>
            <remarks>
            This operator uses immediate execution and effectively buffers the sequence.
            </remarks>
            <param name="source">The sequence of items to delimit. Each is converted to a string using the
            simple ToString() conversion.</param>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.ToDelimitedString(System.Collections.Generic.IEnumerable{System.Byte},System.String)">
            <summary>
            Creates a delimited string from a sequence of values and
            a given delimiter.
            </summary>
            <remarks>
            This operator uses immediate execution and effectively buffers the sequence.
            </remarks>
            <param name="source">The sequence of items to delimit. Each is converted to a string using the
            simple ToString() conversion.</param>
            <param name="delimiter">The delimiter to inject between elements. May be null, in which case
            the executing thread's current culture's list separator is used.</param>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.ToDelimitedString(System.Collections.Generic.IEnumerable{System.Char})">
            <summary>
            Creates a delimited string from a sequence of values. The 
            delimiter used depends on the current culture of the executing thread.
            </summary>
            <remarks>
            This operator uses immediate execution and effectively buffers the sequence.
            </remarks>
            <param name="source">The sequence of items to delimit. Each is converted to a string using the
            simple ToString() conversion.</param>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.ToDelimitedString(System.Collections.Generic.IEnumerable{System.Char},System.String)">
            <summary>
            Creates a delimited string from a sequence of values and
            a given delimiter.
            </summary>
            <remarks>
            This operator uses immediate execution and effectively buffers the sequence.
            </remarks>
            <param name="source">The sequence of items to delimit. Each is converted to a string using the
            simple ToString() conversion.</param>
            <param name="delimiter">The delimiter to inject between elements. May be null, in which case
            the executing thread's current culture's list separator is used.</param>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.ToDelimitedString(System.Collections.Generic.IEnumerable{System.Int16})">
            <summary>
            Creates a delimited string from a sequence of values. The 
            delimiter used depends on the current culture of the executing thread.
            </summary>
            <remarks>
            This operator uses immediate execution and effectively buffers the sequence.
            </remarks>
            <param name="source">The sequence of items to delimit. Each is converted to a string using the
            simple ToString() conversion.</param>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.ToDelimitedString(System.Collections.Generic.IEnumerable{System.Int16},System.String)">
            <summary>
            Creates a delimited string from a sequence of values and
            a given delimiter.
            </summary>
            <remarks>
            This operator uses immediate execution and effectively buffers the sequence.
            </remarks>
            <param name="source">The sequence of items to delimit. Each is converted to a string using the
            simple ToString() conversion.</param>
            <param name="delimiter">The delimiter to inject between elements. May be null, in which case
            the executing thread's current culture's list separator is used.</param>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.ToDelimitedString(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Creates a delimited string from a sequence of values. The 
            delimiter used depends on the current culture of the executing thread.
            </summary>
            <remarks>
            This operator uses immediate execution and effectively buffers the sequence.
            </remarks>
            <param name="source">The sequence of items to delimit. Each is converted to a string using the
            simple ToString() conversion.</param>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.ToDelimitedString(System.Collections.Generic.IEnumerable{System.Int32},System.String)">
            <summary>
            Creates a delimited string from a sequence of values and
            a given delimiter.
            </summary>
            <remarks>
            This operator uses immediate execution and effectively buffers the sequence.
            </remarks>
            <param name="source">The sequence of items to delimit. Each is converted to a string using the
            simple ToString() conversion.</param>
            <param name="delimiter">The delimiter to inject between elements. May be null, in which case
            the executing thread's current culture's list separator is used.</param>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.ToDelimitedString(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Creates a delimited string from a sequence of values. The 
            delimiter used depends on the current culture of the executing thread.
            </summary>
            <remarks>
            This operator uses immediate execution and effectively buffers the sequence.
            </remarks>
            <param name="source">The sequence of items to delimit. Each is converted to a string using the
            simple ToString() conversion.</param>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.ToDelimitedString(System.Collections.Generic.IEnumerable{System.Int64},System.String)">
            <summary>
            Creates a delimited string from a sequence of values and
            a given delimiter.
            </summary>
            <remarks>
            This operator uses immediate execution and effectively buffers the sequence.
            </remarks>
            <param name="source">The sequence of items to delimit. Each is converted to a string using the
            simple ToString() conversion.</param>
            <param name="delimiter">The delimiter to inject between elements. May be null, in which case
            the executing thread's current culture's list separator is used.</param>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.ToDelimitedString(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Creates a delimited string from a sequence of values. The 
            delimiter used depends on the current culture of the executing thread.
            </summary>
            <remarks>
            This operator uses immediate execution and effectively buffers the sequence.
            </remarks>
            <param name="source">The sequence of items to delimit. Each is converted to a string using the
            simple ToString() conversion.</param>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.ToDelimitedString(System.Collections.Generic.IEnumerable{System.Single},System.String)">
            <summary>
            Creates a delimited string from a sequence of values and
            a given delimiter.
            </summary>
            <remarks>
            This operator uses immediate execution and effectively buffers the sequence.
            </remarks>
            <param name="source">The sequence of items to delimit. Each is converted to a string using the
            simple ToString() conversion.</param>
            <param name="delimiter">The delimiter to inject between elements. May be null, in which case
            the executing thread's current culture's list separator is used.</param>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.ToDelimitedString(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Creates a delimited string from a sequence of values. The 
            delimiter used depends on the current culture of the executing thread.
            </summary>
            <remarks>
            This operator uses immediate execution and effectively buffers the sequence.
            </remarks>
            <param name="source">The sequence of items to delimit. Each is converted to a string using the
            simple ToString() conversion.</param>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.ToDelimitedString(System.Collections.Generic.IEnumerable{System.Double},System.String)">
            <summary>
            Creates a delimited string from a sequence of values and
            a given delimiter.
            </summary>
            <remarks>
            This operator uses immediate execution and effectively buffers the sequence.
            </remarks>
            <param name="source">The sequence of items to delimit. Each is converted to a string using the
            simple ToString() conversion.</param>
            <param name="delimiter">The delimiter to inject between elements. May be null, in which case
            the executing thread's current culture's list separator is used.</param>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.ToDelimitedString(System.Collections.Generic.IEnumerable{System.Decimal})">
            <summary>
            Creates a delimited string from a sequence of values. The 
            delimiter used depends on the current culture of the executing thread.
            </summary>
            <remarks>
            This operator uses immediate execution and effectively buffers the sequence.
            </remarks>
            <param name="source">The sequence of items to delimit. Each is converted to a string using the
            simple ToString() conversion.</param>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.ToDelimitedString(System.Collections.Generic.IEnumerable{System.Decimal},System.String)">
            <summary>
            Creates a delimited string from a sequence of values and
            a given delimiter.
            </summary>
            <remarks>
            This operator uses immediate execution and effectively buffers the sequence.
            </remarks>
            <param name="source">The sequence of items to delimit. Each is converted to a string using the
            simple ToString() conversion.</param>
            <param name="delimiter">The delimiter to inject between elements. May be null, in which case
            the executing thread's current culture's list separator is used.</param>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.ToDelimitedString(System.Collections.Generic.IEnumerable{System.UInt16})">
            <summary>
            Creates a delimited string from a sequence of values. The 
            delimiter used depends on the current culture of the executing thread.
            </summary>
            <remarks>
            This operator uses immediate execution and effectively buffers the sequence.
            </remarks>
            <param name="source">The sequence of items to delimit. Each is converted to a string using the
            simple ToString() conversion.</param>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.ToDelimitedString(System.Collections.Generic.IEnumerable{System.UInt16},System.String)">
            <summary>
            Creates a delimited string from a sequence of values and
            a given delimiter.
            </summary>
            <remarks>
            This operator uses immediate execution and effectively buffers the sequence.
            </remarks>
            <param name="source">The sequence of items to delimit. Each is converted to a string using the
            simple ToString() conversion.</param>
            <param name="delimiter">The delimiter to inject between elements. May be null, in which case
            the executing thread's current culture's list separator is used.</param>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.ToDelimitedString(System.Collections.Generic.IEnumerable{System.UInt32})">
            <summary>
            Creates a delimited string from a sequence of values. The 
            delimiter used depends on the current culture of the executing thread.
            </summary>
            <remarks>
            This operator uses immediate execution and effectively buffers the sequence.
            </remarks>
            <param name="source">The sequence of items to delimit. Each is converted to a string using the
            simple ToString() conversion.</param>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.ToDelimitedString(System.Collections.Generic.IEnumerable{System.UInt32},System.String)">
            <summary>
            Creates a delimited string from a sequence of values and
            a given delimiter.
            </summary>
            <remarks>
            This operator uses immediate execution and effectively buffers the sequence.
            </remarks>
            <param name="source">The sequence of items to delimit. Each is converted to a string using the
            simple ToString() conversion.</param>
            <param name="delimiter">The delimiter to inject between elements. May be null, in which case
            the executing thread's current culture's list separator is used.</param>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.ToDelimitedString(System.Collections.Generic.IEnumerable{System.UInt64})">
            <summary>
            Creates a delimited string from a sequence of values. The 
            delimiter used depends on the current culture of the executing thread.
            </summary>
            <remarks>
            This operator uses immediate execution and effectively buffers the sequence.
            </remarks>
            <param name="source">The sequence of items to delimit. Each is converted to a string using the
            simple ToString() conversion.</param>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.ToDelimitedString(System.Collections.Generic.IEnumerable{System.UInt64},System.String)">
            <summary>
            Creates a delimited string from a sequence of values and
            a given delimiter.
            </summary>
            <remarks>
            This operator uses immediate execution and effectively buffers the sequence.
            </remarks>
            <param name="source">The sequence of items to delimit. Each is converted to a string using the
            simple ToString() conversion.</param>
            <param name="delimiter">The delimiter to inject between elements. May be null, in which case
            the executing thread's current culture's list separator is used.</param>
        </member>
        <member name="T:JetBrains.Annotations.AssertionMethodAttribute">
            <summary>
            Indicates that the marked method is assertion method, i.e. it halts control flow if one of the conditions is satisfied. 
            To set the condition, mark one of the parameters with <see cref="T:JetBrains.Annotations.AssertionConditionAttribute"/> attribute.
            </summary>
            <seealso cref="T:JetBrains.Annotations.AssertionConditionAttribute"/>
        </member>
        <member name="T:JetBrains.Annotations.AssertionConditionAttribute">
            <summary>
            Indicates the condition parameter of the assertion method. 
            The method itself should be marked by <see cref="T:JetBrains.Annotations.AssertionMethodAttribute"/> attribute.
            The mandatory argument of the attribute is the assertion type.
            </summary>
            <seealso cref="T:JetBrains.Annotations.AssertionConditionType"/>
        </member>
        <member name="M:JetBrains.Annotations.AssertionConditionAttribute.#ctor(JetBrains.Annotations.AssertionConditionType)">
            <summary>
            Initializes new instance of AssertionConditionAttribute.
            </summary>
            <param name="conditionType">Specifies condition type.</param>
        </member>
        <member name="P:JetBrains.Annotations.AssertionConditionAttribute.ConditionType">
            <summary>
            Gets condition type.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AssertionConditionType">
            <summary>
            Specifies assertion type. If the assertion method argument satisifes the condition, then the execution continues. 
            Otherwise, execution is assumed to be halted.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_TRUE">
            <summary>
            Indicates that the marked parameter should be evaluated to true.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_FALSE">
            <summary>
            Indicates that the marked parameter should be evaluated to false.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_NULL">
            <summary>
            Indicates that the marked parameter should be evaluated to null value.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_NOT_NULL">
            <summary>
            Indicates that the marked parameter should be evaluated to not null value.
            </summary>
        </member>
        <member name="T:Mannex.Int32Extensions">
            <summary>
            Extension methods for <see cref="T:System.Int32"/>.
            </summary>
        </member>
        <member name="M:Mannex.Int32Extensions.ToInvariantString(System.Int32)">
            <summary>
            Converts <see cref="T:System.Int32"/> to its string representation in the
            invariant culture.
            </summary>
        </member>
        <member name="M:Mannex.Int32Extensions.DivRem``1(System.Int32,System.Int32,System.Func{System.Int32,System.Int32,``0})">
            <summary>
            Calculates the quotient and remainder from dividing two numbers 
            and returns a user-defined result.
            </summary>
        </member>
        <member name="T:Mannex.Collections.Generic.DictionaryExtensions">
            <summary>
            Extension methods for <see cref="T:System.Collections.Generic.Dictionary`2"/>.
            </summary>
        </member>
        <member name="M:Mannex.Collections.Generic.DictionaryExtensions.Find``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            Finds the value for a key, returning the default value for 
            <typeparamref name="TKey"/> if the key is not present.
            </summary>
        </member>
        <member name="M:Mannex.Collections.Generic.DictionaryExtensions.Find``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Finds the value for a key, returning a given default value for 
            <typeparamref name="TKey"/> if the key is not present.
            </summary>
        </member>
        <member name="T:Mannex.ICloneableExtensions">
            <summary>
            Extension methods for <see cref="T:System.ICloneable"/> objects.
            </summary>
        </member>
        <member name="M:Mannex.ICloneableExtensions.CloneObject``1(``0)">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
        </member>
        <member name="T:Mannex.Threading.Tasks.TaskCompletionSourceExtensions">
            <summary>
            Extension methods for <see cref="T:System.Threading.Tasks.TaskCompletionSource`1"/>.
            </summary>
        </member>
        <member name="M:Mannex.Threading.Tasks.TaskCompletionSourceExtensions.TryConcludeFrom``1(System.Threading.Tasks.TaskCompletionSource{``0},System.Threading.Tasks.Task{``0})">
            <summary>
            Attempts to conclude <see cref="T:System.Threading.Tasks.TaskCompletionSource`1"/>
            as being canceled, faulted or having completed successfully
            based on the corresponding status of the given 
            <see cref="T:System.Threading.Tasks.Task`1"/>.
            </summary>
        </member>
        <member name="T:Mannex.Threading.Tasks.TaskExtensions">
            <summary>
            Extension methods for <see cref="T:System.Threading.Tasks.Task"/>.
            </summary>
        </member>
        <member name="M:Mannex.Threading.Tasks.TaskExtensions.Apmize``1(System.Threading.Tasks.Task{``0},System.AsyncCallback,System.Object)">
            <summary>
            Returns a <see cref="T:System.Threading.Tasks.Task`1"/> that can be used as the
            <see cref="T:System.IAsyncResult"/> return value from the method
            that begin the operation of an API following the 
            <a href="http://msdn.microsoft.com/en-us/library/ms228963.aspx">Asynchronous Programming Model</a>.
            If an <see cref="T:System.AsyncCallback"/> is supplied, it is invoked
            when the supplied task concludes (fails, cancels or completes
            successfully).
            </summary>
        </member>
        <member name="M:Mannex.Threading.Tasks.TaskExtensions.Apmize``1(System.Threading.Tasks.Task{``0},System.AsyncCallback,System.Object,System.Threading.Tasks.TaskScheduler)">
            <summary>
            Returns a <see cref="T:System.Threading.Tasks.Task`1"/> that can be used as the
            <see cref="T:System.IAsyncResult"/> return value from the method
            that begin the operation of an API following the 
            <a href="http://msdn.microsoft.com/en-us/library/ms228963.aspx">Asynchronous Programming Model</a>.
            If an <see cref="T:System.AsyncCallback"/> is supplied, it is invoked
            when the supplied task concludes (fails, cancels or completes
            successfully).
            </summary>
        </member>
    </members>
</doc>
